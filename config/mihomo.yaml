### 全局配置
mixed-port: 7890 # HTTP(S) + SOCKS 混合代理端口，Clash 主代理入口
allow-lan: true # 允许局域网设备连接本机代理
mode: rule # 代理模式，使用规则分流
bind-address: "*" # 绑定所有网卡地址，使局域网内其他设备可访问
ipv6: false # 禁用 IPv6，防止 DNS 泄露及访问异常
log-level: debug # 日志等级，调试时推荐设置为 debug
profile:
  store-selected: true # 记住上次选择的节点或策略
  store-fake-ip: true # 记住 fake-ip 映射关系，提升命中率
unified-delay: true # 启用统一延迟计算
tcp-concurrent: true # TCP 并发连接，提升连接速度
global-client-fingerprint: chrome # 全局默认浏览器指纹，用于模拟真实浏览器行为

### DNS 配置
dns:
  enable: true # 启用内置 DNS 服务器
  prefer-h3: true # 优先使用 HTTP/3（QUIC）协议解析 DNS 请求
  ipv6: false # 不解析 AAAA 记录，避免走 IPv6
  enhanced-mode: fake-ip # 使用 fake-ip 模式，防止 DNS 泄露
  fake-ip-range: 198.18.0.1/16 # 用于 fake-ip 映射的 IP 段（保留地址段）
  fake-ip-filter: # fake-ip 排除列表，这些域名将使用真实 IP 解析，防止功能异常
    - +.+m2m
    - +.$injections.adguard.org
    - +.$local.adguard.org
    - +.+bogon
    - +.+lan
    - +.+local
    - +.+localdomain
    - +.home.arpa
    - dns.msftncsi.com
    - "*.srv.nintendo.net"
    - "*.stun.playstation.net"
    - xbox.*.microsoft.com
    - "*.xboxlive.com"
    - "*.turn.twilio.com"
    - "*.stun.twilio.com"
    - stun.syncthing.net
    - stun.*
    - "*.sslip.io"
    - "*.nip.io"
  respect-rules: true # DNS 查询也按 Clash 规则处理
  nameserver: # 直连使用的 DNS 服务器（DoH）
    - https://223.5.5.5/dns-query # 阿里公共 DNS
    - https://doh.pub/dns-query # 腾讯公共 DNS
  proxy-server-nameserver: # 被规则判断为走代理的域名使用此处 DNS
    - https://1.1.1.1/dns-query # Cloudflare DoH
    - https://8.8.8.8/dns-query # Google DoH

proxies:
  - { name: "🇯🇵日本claw",xx}
  - { name: "🇺🇸美国dmit",xx}

### 出站策略锚点（用于复用）
pr: &pr { type: select, proxies: [ 🚀 节点选择, ♻️ 自动选择, 🇯🇵日本claw, 🇺🇸美国dmit, 🎯 全球直连 ] }

### 代理组定义
proxy-groups:
  - { name: 🚀 节点选择, type: select, proxies: [ ♻️ 自动选择, 🇯🇵日本claw, 🇺🇸美国dmit ] }
  - { name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(🎯 全球直连)).)*$" }
  - { name: 📹 YouTube, <<: *pr }
  - { name: 🍀 Google, <<: *pr }
  - { name: 🤖 AI, <<: *pr }
  - { name: 🧰 GitHub, <<: *pr }
  - { name: Ⓜ️ Microsoft, <<: *pr }
  - { name: 📲 Telegram, <<: *pr }
  - { name: 🎥 NETFLIX, <<: *pr }
  - { name: ✈️ Speedtest, <<: *pr }
  - { name: 🍎 Apple, <<: *pr }
  - { name: 🐟 漏网之鱼, <<: *pr }
  - { name: 🎯 全球直连, type: select, proxies: [ DIRECT ] }


### 分流规则
rules:
  - RULE-SET,private_domain,🎯 全球直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,ai,🤖 AI
  - RULE-SET,github_domain,🧰 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,microsoft_domain,Ⓜ️ Microsoft
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,gfw_domain,🚀 节点选择
  - RULE-SET,geolocation-!cn,🚀 节点选择
  - RULE-SET,cn_domain,🎯 全球直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 全球直连
  - RULE-SET,lan_ip,🎯 全球直连
  - GEOIP,CN,🎯 全球直连
  - MATCH,🐟 漏网之鱼

### 规则锚点
rule-anchor:
  ip: &ip { type: http, interval: 86400, behavior: ipcidr, format: mrs }
  domain: &domain { type: http, interval: 86400, behavior: domain, format: mrs }
  class: &class { type: http, interval: 86400, behavior: classical, format: text }

### 外部规则列表
rule-providers:
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs" }
  ai: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs" }
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs" }
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs" }
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs" }
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs" }
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs" }
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs" }
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs" }
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs" }
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs" }
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs" }

  lan_ip: { <<: *class, url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Lan/Lan.yaml'}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs" }
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs" }
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs" }
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs" }
